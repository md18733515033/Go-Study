1. len() 和 cap() 函数
切片是可索引的，并且可以由 len() 方法获取长度。

切片提供了计算容量的方法 cap() 可以测量切片最长可以达到多少。
2. 定义切片
   你可以声明一个未指定大小的数组来定义切片：

   var identifier []type
   切片不需要说明长度。

   或使用make()函数来创建切片:
   如果只指定长度,那么切片的长度和容量相等
   var slice1 []type = make([]type, len)

   也可以简写为

   slice1 := make([]type, len)
   也可以指定容量，其中capacity为可选参数。

   make([]T, length, capacity)
   这里 len 是数组的长度并且也是切片的初始长度。
   初始化后并不能访问所有的数组元素,这能访问length个数组元素,而底层数组拥有capacity个,
   因此剩下的capacity-length个元素可以再后期操作中合并到切片,然后才可以通过切片访问这些元素


3: 切片和copy的差别
    1. 切片之后切片和原来的数组还是共用同一块内存空间,所以修改切片原来的数组内得值同样会改变
    2. copy是在内存中开辟一块内存空间,将要复制的数组或切片复制一份进去,两者互不影响

4. append()
append会智能地处理底层数组的容量,使其增长,在切片的容量小于1000个元素时,总是会成倍的增加容量,一旦元素个数超过1000个,容量的增长因子会设为1.25,
也就是每次会增加25%的容量(随着语言的发展演化,增长算法可能会有所改变)