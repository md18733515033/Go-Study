Go 语言接口
Go 语言提供了另外一种数据类型即接口，它把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口。

实例
实例
/* 定义接口 */
type interface_name interface {
   method_name1 [return_type]
   method_name2 [return_type]
   method_name3 [return_type]
   ...
   method_namen [return_type]
}

/* 定义结构体 */
type struct_name struct {
   /* variables */
}

/* 实现接口方法 */
func (struct_name_variable struct_name) method_name1() [return_type] {
   /* 方法实现 */
}
...
func (struct_name_variable struct_name) method_namen() [return_type] {
   /* 方法实现*/
}

1. 接口里的所有方法都没有方法体,即接口的方法都是没有实现的方法,接口体现了程序设计的高内聚低耦合的思想
2. Golang的接口,不需要显示的实现,只要一个变量,含有接口类型的所有方法,那么这个变量就实现了这个接口.

接口的注意事项及细节
1. 接口本身不能创建实例,但是可以指向一个实现了该接口的自定义类型的变量(实例)
2. 接口中的方法都没有方法体,即都是没有实现的方法
3. 在Golang中,一个自定义类型需要将某个接口的所有方法都实现,我们说这个自定义类型实现了这个接口
4. 只要是自定义数据类型,就可以实现接口,不仅仅是结构体类型
5. 一个自定义类型可以实现多个接口
6. Golang接口中不能有任何变量
7.  一个接口(比如A接口)可以继承多个别的接口(比如B,C接口),这时如果要实现A接口,也必须要将B,C的接口全部实现
8. interface类型默认是一个指针(引用类型),如果没有对interface没有初始化就使用,那么会输出nil
9. 空接口interface{}没有任何方法,所以所有类型都实现了空接口,我们可以吧任何变量赋值给空接口

package main

type DInterface interface {
	Test01()
	Test02()
}

type EInterface interface {
	Test01()
	Test03()
}

type FInterface interface {
	DInterface
	EInterface
}
func main() {
	var a FInterface
}
两个接口有相同的方法Test01(),会报错

package main

import "fmt"

type Use interface {
	Say()
}
type Ph struct {

}

func (this *Ph) Say() {
	fmt.Println("11111")
}
func main() {
	var ph Ph
	// 只有Ph结构体的指针实现了Say方法,ph并没有实现,所以想要赋值给use只能使用ph的指针类型
	var u Use = &ph
	u.Say()
}

接口和继承解决的问题不同
1. 继承的价值主要在于,解决代码的复用性和可维护性
   接口的价值在于设计,设计好各种规范,让其他自定义类型去实现这些方法
2. 接口比继承更加灵活,继承是is-a的关系,而接口是like-a的关系
3. 接口在一定程度上实现了代码的解耦

go中的面向对象中的多态就是使用接口来实现的,按照统一的接口来调用不同的实现,这时接口变量就呈现不同的形态