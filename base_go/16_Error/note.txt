1. Go 错误处理
Go 语言通过内置的错误接口提供了非常简单的错误处理机制。

error类型是一个接口类型，这是它的定义：

type error interface {
    Error() string
}
我们可以在编码中通过实现 error 接口类型来生成错误信息。

函数通常在最后的返回值中返回错误信息。使用errors.New 可返回一个错误信息：

func Sqrt(f float64) (float64, error) {
    if f < 0 {
        return 0, errors.New("math: square root of negative number")
    }
    // 实现
}

2.panic 与 recover 是 Go 的两个内置函数
    这两个内置函数用于处理 Go 运行时的错误，panic 用于主动抛出错误，recover 用来捕获 panic 抛出的错误。
    1. 引发panic有两种情况，一是程序主动调用，二是程序产生运行时错误，由运行时检测并退出。
    2. 发生panic后，程序会从调用panic的函数位置或发生panic的地方立即返回，逐层向上执行函数的defer语句，然后逐层打印函数调用堆栈，
        直到被recover捕获或运行到最外层函数。
    3. panic不但可以在函数正常流程中抛出，在defer逻辑里也可以再次调用panic或抛出panic。defer里面的panic能够被后续执行的defer捕获。
    4. recover用来捕获panic，阻止panic继续向上传递。recover()和defer一起使用，
        但是recover()只有在defer后面的函数体内直接被调用才能捕获panic来终止异常，否则返回nil，异常继续向外传递。
3. panic和os.Exit的区别
os.Exit退出时不会调用defer指定的函数
os.Exit退出时不输出当前调用栈信息