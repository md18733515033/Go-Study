1. 函数定义
Go 语言函数定义格式如下：

func function_name( [parameter list] ) [return_types] {
   函数体
}
2. 函数定义解析：

func：函数由 func 开始声明
function_name：函数名称，函数名和参数列表一起构成了函数签名。
parameter list：参数列表，参数就像一个占位符，当函数被调用时，你可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序、及参数个数。参数是可选的，也就是说函数也可以不包含参数。
return_types：返回类型，函数返回一列值。return_types 是该列值的数据类型。有些功能不需要返回值，这种情况下 return_types 不是必须的。
函数体：函数定义的代码集合。

3. 函数和方法的异同:
    在java中,一般认为函数就是方法,方法就是函数
    在python中,一般认为类下面的函数叫方法,不在类下面的叫函数
    但是在go中,函数是指不属于任何结构体 类型的方法,也就是说函数是没有接受者的,而方法是有接收者的,我们所说的方法要么属于一个结构体,要么属于一个新定义的类型

声明一个外部定义的函数只需要给出函数名和函数签名,不需要写出完整的函数体
func hello(str, num int) // 外部实现

函数同样可以通过声明的方式作为一个函数类型被使用
type addNum func(int, int) int

4. 内置函数
close : 用于管道通信
len() : 用于返回某个类型的长度或数量(字符串, 数组, 切片, map 和 管道)
cap() : 容量的意思,用于返回某个类型的最大容量(只能用于切片和map)
new make : 均用于内存分配,不过new是用于值类型和用户定义的类型, 比如自定义结构, make用于内置引用类型(切片 map 管道) 他们的用法就像是函数,
            但是是将类型作为参数: new(type) , make(type).
            new(T)用于分配T类型的零值并返回其地址,也就是指向类型T的指针,也可以用于基本类型: v := new(int).
            make(T)返回类型的T初始化之后的值,因此他比new做更多工作
copy, append : 用户复制和连接切片
panic, recover: 两者均用于错误处理机制,panic类似于python中的raise, recover 类似于python中的try ... except ...
Print Println: 底层打印函数(部署环境中建议使用fmt包)