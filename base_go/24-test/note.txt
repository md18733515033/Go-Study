Go语言中自带有一个轻量别的测试框架testing和自带的go test命令来实现单元测试和性能测试
testing框架和其他语言的测试框架爱类似,可以基于这个框架写针对相应函数的测试用例,也可以基于该框架写相应的压力测试用例.
1. 确保每个函数是可运行,并且运行结果是正确的
2. 确保写出来的代码性能是好的
3. 单元测试能及时发现程序设计或者实现的逻辑错误,使问题及早暴露,便于问题的定位解决,而性能测试的重点在于发现程序设计上的一些问题,让程序能够在高并发的情况下还能保持稳定


注意细节:
    1. 测试用例文件名必须以_test.go结尾
    2. 测试用例函数必须用Test开头,一般是用Test+被测试的函数名,比如TestAddNum,Test后的第一个字母需要大写
    3. TestAddNum(t *testing.T)的形参类型必须是*testing.T
    4.一个测试用例文件中,可以有多个测试用例函数
    5. 运行测试用例指令
        go test 如果运行正确,无日志,错误时,会输出日志
        go test -v 运行正确或者错误,都会输出日志
    6.当出现错误时,可以使用t.Fatalf来格式化输出错误信息,并退出程序
    7.t.Logf方法可以输出相应的日志
    8.测试用例函数,并没有放在main函数中,也执行了,这就是测试用例的方便之处
    9.PASS表示测试用例运行成功,FAIL表示测试用例运行失败
    10. 测试单个文件,一定要带上被测试的原文件
        go test -v func_test.go func.go
    11. 测试单个方法
        go test -v -test.run TestHello