1. 输入流和输出流
    文件在程序中是以流的形式来操作的
    输入流: 数据从数据源(文件)到程序(内存)的路径
    输出流: 数据从程序(内存)到数据源(文件)的路径
2. 打开文件:
    func Open(name string) (file *File, err error)
    Open打开一个文件用于读取。如果操作成功，返回的文件对象的方法可用于读取数据；对应的文件描述符具有O_RDONLY模式。如果出错，错误底层类型是*PathError。
3. 关闭文件:
    func (f *File) Close() error
    Close关闭文件f，使文件不能用于读写。它返回可能出现的错误。
4. 文件的模式以及文件的flag
    const (
        O_RDONLY int = syscall.O_RDONLY // 只读模式打开文件
        O_WRONLY int = syscall.O_WRONLY // 只写模式打开文件
        O_RDWR   int = syscall.O_RDWR   // 读写模式打开文件
        O_APPEND int = syscall.O_APPEND // 写操作时将数据附加到文件尾部
        O_CREATE int = syscall.O_CREAT  // 如果不存在将创建一个新文件
        O_EXCL   int = syscall.O_EXCL   // 和O_CREATE配合使用，文件必须不存在
        O_SYNC   int = syscall.O_SYNC   // 打开文件用于同步I/O
        O_TRUNC  int = syscall.O_TRUNC  // 如果可能，打开时清空文件
    )
    用于包装底层系统的参数用于Open函数，不是所有的flag都能在特定系统里使用的。

    const (
        SEEK_SET int = 0 // 相对于文件起始位置seek
        SEEK_CUR int = 1 // 相对于文件当前位置seek
        SEEK_END int = 2 // 相对于文件结尾位置seek
    )
5. 判断目录或者文件是否存在
    func (f *File) Stat() (fi FileInfo, err error)
    Stat返回描述文件f的FileInfo类型值。如果出错，错误底层类型是*PathError。